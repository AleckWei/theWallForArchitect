目录
1、Java反射机制概述
2、理解Class类并获取Class实例
3、类的加载与ClassLoader
4、创建运行时类的对象
5、获取运行时类的完整结构
6、调用运行时类的指定结构

前言
静态语言 vs 动态语言

动态语言
    是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的
    函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身
    结构。

    主要的动态语言： Object-C、C#、JavaScript、PHP、Python等

静态语言
    与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。

    Java不是动态语言，但Java可以称之为“准动态语言”。即Java具有一定的动态性，我们可以
    利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！

一、Java Reflection
    Reflection(反射)是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API
    取得任何类的内部信息，并能直接操作任意对象的内部属性及方法

        Class c = Class.forName("java.lang.String");

    加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个
    对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，
    透过这个镜子看到类的结构，所以，我们形象地称之为：反射

    正常方式： 引入需要的“包类”名称 -> 通过new实例化 -> 取得实例化对象
    反射方式： 实例化对象 -> getClass() 方法 -> 得到完整的“包类”名称

Java 反射机制提供的功能
    在运行时判断任意一个对象所属的类
    在运行时构造任意一个类的对象
    在运行时判断任意一个类所具有的成员变量和方法
    在运行时获取泛型信息
    在运行时调用任意一个对象的成员变量和方法
    在运行时处理_注解_
    生成动态代理_AOP_(面向切面编程)

优点
    可以实现动态创建对象和编译，体现出很大的灵活性

缺点
    对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，
    我们希望做什么并且它满足我们的要求。这类操作_总是慢于_直接执行相同的操作

相关的API
    java.lang.Class: 代表一个类
    java.lang.reflect.Method: 代表类的方法
    java.lang.reflect.Field: 代表类的成员变量
    java.lang.reflect.Constructor: 代表类的构造器
    ...

Class类
    在Object类中定义了以下的方法，此方法被所有子类继承
    public final Class getClass()

    以上的方法返回值的类型是一个Class类，此类是Java反射的源头，
    实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称

    对象照镜子后以及得到的信息：
        某个类的属性、方法和构造器、某个类到底实现了哪些接口。

    对于每个类而言，JRE都为其保留了一个不变的Class类型的对象。
    一个Class对象包含了特定某个结构（class/interface/enum/annotation/primitive type/void[]）
    的有关信息。

    Class本身也是一个类
    Class对象只能由系统建立对象
    一个加载的类在JVM中只会有一个Class实例
    一个Class对象对应的是一个加载到JVM的.class文件
    每个类的实例都会记得自己是由哪个Class实例所生成
    通过Class可以完整地得到一个类中的所有被加载的结构
    Class类时Reflection的根源，针对任何你想
        动态加载、运行的类，
    唯有先获得相应的Class对象

Class 类的常用方法
    static ClassForName(String name)            返回指定类名name的Class对象
    Object newInstance()                        调用缺省构造函数，返回Class对象的一个实例
    getName()                                   返回此Class对象所表示的实体（类、接口、数组类或void）
                                                的名称
    Class getSuperClass()                       返回当前Class对象的父类的Class对象
    Class[] getInterfaces()                     获取当前Class对象的接口
    ClassLoader getClassLoader()                返回该类的类加载器
    Constructor[] getConstructors()             返回一个包含某些Constructor对象的数组
    Method getMethod(String name,Class... T)    返回一个Method对象，此对象的形参类型为paramType
    Field[] getDeclaredFields()                 返回Field对象的一个数组

    a) 若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高
        Class clazz = Person.class;

    b) 已知某个类的实例，调用该实例的getClass()方法获取Class对象
        Class clazz = person.getClass();

    c) 已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，
        可能抛出一个ClassNotFoundException;

        try {
            Class clazz = Class.forName("com.example.zhujie.reflection.UserV2")
        } catch(ClassNotFoundException e) {
            e.printTrack();
        }

    d) 内置基本数据类型可以直接用类型.Type
    e) 还可以利用ClassLoader

哪些类型可以有Class对象？
    class: 外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类
    interface: 接口
    []: 数组
    enum: 枚举
    annotation: 注解@interface
    primitive type: 基本数据类型
    void

Java 内存分析
    Java内存 {
        堆 {
            存放new的对象和数组
            可以被所有的线程共享，不会存放别的对象引用
        }
        栈 {
            存放基本变量类型（会包含这个基本类型的具体数值）
            引用对象的变量（会存放放在这个引用在堆里面的具体地址）
        }
        方法区 {
            可以被所有的线程共享
            包含了所有的class和static变量
        }
    }

了解：类的加载过程
    当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来
    对该类进行初始化

    1.类的加载(Load):
        将类的class文件读入内存，并为之创建一个java.lang.Class对象。
        此过程由类加载器完成

    2.类的链接(Link):
        将类的二进制数据合并到JRE(Java Run Environment)中

    3.类的初始化(Initialize):
        JVM负责对类进行初始化

类的加载与ClassLoader的理解
    加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据
        结构，然后生成一个代表这个类的java.lang.Class对象

    链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。
        验证：确保加载的类信息符合JVM规范，没有安全方面的问题
        准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，
            这些内存都在方法区中进行分配。
        解析：虚拟机常亮池的符号引用（常量名）替换为直接引用（地址）的过程

    初始化：
        执行构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中
        所有类变量的赋值动作和静态代码块中的语句合并产生的。(类构造器是构造类信息的，不
        是构造该类对象的构造器)。

        当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。

        虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。

什么时候会发生类的初始化
    类的主动引用（一定会发生类的初始化）
        当虚拟机启动时，先初始化main方法所在的类
        new一个类的对象
        调用类的静态成员（除了final常量）和静态方法
        使用java.lang.reflect包的方法对类进行反射调用
        当初始化一个类，如果其父类没有被初始化，则会先初始化它的父类

    类的被动引用（不会发生类的初始化）
        当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类
        的静态变量，不会导致子类初始化？
        通过数组定义类引用，不会触发此类的初始化
        引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）