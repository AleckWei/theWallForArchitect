目录
1、Java反射机制概述
2、理解Class类并获取Class实例
3、类的加载与ClassLoader
4、创建运行时类的对象
5、获取运行时类的完整结构
6、调用运行时类的指定结构

前言
静态语言 vs 动态语言

动态语言
    是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的
    函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身
    结构。

    主要的动态语言： Object-C、C#、JavaScript、PHP、Python等

静态语言
    与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。

    Java不是动态语言，但Java可以称之为“准动态语言”。即Java具有一定的动态性，我们可以
    利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！

一、Java Reflection
    Reflection(反射)是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API
    取得任何类的内部信息，并能直接操作任意对象的内部属性及方法

        Class c = Class.forName("java.lang.String");

    加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个
    对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，
    透过这个镜子看到类的结构，所以，我们形象地称之为：反射

    正常方式： 引入需要的“包类”名称 -> 通过new实例化 -> 取得实例化对象
    反射方式： 实例化对象 -> getClass() 方法 -> 得到完整的“包类”名称
