目录
1、Java反射机制概述
2、理解Class类并获取Class实例
3、类的加载与ClassLoader
4、创建运行时类的对象
5、获取运行时类的完整结构
6、调用运行时类的指定结构

前言
静态语言 vs 动态语言

动态语言
    是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的
    函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身
    结构。

    主要的动态语言： Object-C、C#、JavaScript、PHP、Python等

静态语言
    与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。

    Java不是动态语言，但Java可以称之为“准动态语言”。即Java具有一定的动态性，我们可以
    利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！

一、Java Reflection
    Reflection(反射)是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API
    取得任何类的内部信息，并能直接操作任意对象的内部属性及方法

        Class c = Class.forName("java.lang.String");

    加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个
    对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，
    透过这个镜子看到类的结构，所以，我们形象地称之为：反射

    正常方式： 引入需要的“包类”名称 -> 通过new实例化 -> 取得实例化对象
    反射方式： 实例化对象 -> getClass() 方法 -> 得到完整的“包类”名称

Java 反射机制提供的功能
    在运行时判断任意一个对象所属的类
    在运行时构造任意一个类的对象
    在运行时判断任意一个类所具有的成员变量和方法
    在运行时获取泛型信息
    在运行时调用任意一个对象的成员变量和方法
    在运行时处理_注解_
    生成动态代理_AOP_(面向切面编程)

优点
    可以实现动态创建对象和编译，体现出很大的灵活性

缺点
    对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，
    我们希望做什么并且它满足我们的要求。这类操作_总是慢于_直接执行相同的操作

相关的API
    java.lang.Class: 代表一个类
    java.lang.reflect.Method: 代表类的方法
    java.lang.reflect.Field: 代表类的成员变量
    java.lang.reflect.Constructor: 代表类的构造器
    ...

Class类
    在Object类中定义了以下的方法，此方法被所有子类继承
    public final Class getClass()

    以上的方法返回值的类型是一个Class类，此类是Java反射的源头，
    实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称

    对象照镜子后以及得到的信息：
        某个类的属性、方法和构造器、某个类到底实现了哪些接口。

    对于每个类而言，JRE都为其保留了一个不变的Class类型的对象。
    一个Class对象包含了特定某个结构（class/interface/enum/annotation/primitive type/void[]）
    的有关信息。

    Class本身也是一个类
    Class对象只能由系统建立对象
    一个加载的类在JVM中只会有一个Class实例
    一个Class对象对应的是一个加载到JVM的.class文件
    每个类的实例都会记得自己是由哪个Class实例所生成
    通过Class可以完整地得到一个类中的所有被加载的结构
    Class类时Reflection的根源，针对任何你想
        动态加载、运行的类，
    唯有先获得相应的Class对象

Class 类的常用方法
    static ClassForName(String name)            返回指定类名name的Class对象
    Object newInstance()                        调用缺省构造函数，返回Class对象的一个实例
    getName()                                   返回此Class对象所表示的实体（类、接口、数组类或void）
                                                的名称
    Class getSuperClass()                       返回当前Class对象的父类的Class对象
    Class[] getInterfaces()                     获取当前Class对象的接口
    ClassLoader getClassLoader()                返回该类的类加载器
    Constructor[] getConstructors()             返回一个包含某些Constructor对象的数组
    Method getMethod(String name,Class... T)    返回一个Method对象，此对象的形参类型为paramType
    Field[] getDeclaredFields()                 返回Field对象的一个数组

    a) 若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高
        Class clazz = Person.class;

    b) 已知某个类的实例，调用该实例的getClass()方法获取Class对象
        Class clazz = person.getClass();

    c) 已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，
        可能抛出一个ClassNotFoundException;

        try {
            Class clazz = Class.forName("com.example.zhujie.reflection.User")
        } catch(ClassNotFoundException e) {
            e.printTrack();
        }

    d) 内置基本数据类型可以直接用类型.Type
    e) 还可以利用ClassLoader

哪些类型可以有Class对象？
    class: 外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类
    interface: 接口
    []: 数组
    enum: 枚举
    annotation: 注解@interface
    primitive type: 基本数据类型
    void