掌握好rxJava的三个事件流的概念

1. 链式构建流
    RxJava 使用了装饰器模式，所以每次新的被观察者的构建都是基于上一个被观察者的，
    也就是持有了上游被观察者的引用

    每次创建新的被观察者，也会创建新的观察者，而这个观察者同样持有下游被观察者的引用

    ObservableOnSubscribe source = new ObservableOnSubscribe() {...}

    Observable.create(source) -> observable0 = new ObservableCreate(source)

    observable0.map() -> observable1 = new ObservableMap(observable0)

    observable1.subscribeOn() -> observable2 = new ObservableSubscribeOn(observable1)

    observable2.flatMap() -> observable3 = new ObservableFlatMap(observable2)

    observable3.observableOn() -> observable4 = new ObservableObservableOn(observable3)

    observable4.flatMap() -> observable5 = new ObservableFlatMap(observable4)

    就是从source开始，用装饰器模式不断生成新的Observable，直到subscribe

2. subscribeActual订阅流
    订阅流则是事件创建流的逆序

    Observer observer0 = new Observer(){...}
    observable5.subscribe(observer0) -> observable5.subscribeActual(observer0)

    Observer observer1 = new MergerObserver(observer0) {...}
    -> observable4.subscribe(observer1) -> observable4.subscribeActual(observer1)

    Observer observer2 = new ObserverOnObserver(observer1) {...}
    -> observable3.subscribe(observer2) -> observable3.subscribeActual(observer2)

    Observer observer3 = new MapObserver(observer2) {...}
    -> observable2.subscribe(observer3) -> observable2.subscribeActual(observer3)

    Observer observer4 = new SubscribeOnObserver(observer3) {...}
    -> observable1.subscribe(observer4) -> observable1.subscribeActual(observer4)

    Observer observer5 = new MapOnObserver(observer4) {...}
    -> observable0.subscribe(observer5) -> observable0.subscribeActual(observer5)

3. 观察者回调流
    observable0 持有一个 ObservableOnSubscribe 的引用，这个事件发射源source，将会由
    observable() 开启： observable0.subscribeActual(observer5)
    -> 创建一个Emitter：
        CreateEmitter<T> parent = new CreateEmitter<>(observer5);
    -> source.subscribe(parent)，开始发送真正的事件

    此后 Emitter(上面的parent) 就发送事件， parent.onNext("xxx");
    -> observer5.onNext("xxx")
    -> observer4.onNext("xxx")
    -> observer3.onNext("xxx")
    -> observer2.onNext("xxx")
    -> observer1.onNext("xxx")
    -> observer0.onNext("xxx")

    observer0 就是我们手动构造出来的事件，里面做我们的业务处理

    这样就完成了事件链的流动

事件流动是从左向右的；把每个被观察者看成一个节点
节点左侧代表上流，节点右侧代表下游