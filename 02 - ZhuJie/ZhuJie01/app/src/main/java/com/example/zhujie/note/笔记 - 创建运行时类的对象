获取运行时类的完整结构
    通过反射获取运行时类的完整结构
    Filed、Method、Constructor、Superclass、Interface、Annotation

    实现的全部接口
    所继承的父类
    全部的构造器
    全部的方法
    全部的Field
    注解
    。。。

小结
    在实际操作中，取得类的信息的操作代码，并不会经常开发。
    一定要熟悉java.lang.reflect包的作用，反射机制。
    如何取得属性、方法、构造器的名称，修饰符等。

有了Class对象，能干什么？
    创建类的对象：调用Class对象的newInstance()方法
        1) 类必须要有一个无参数的构造器。
        2) 类的构造器的访问权限需要足够

    思考：难道没有无参的构造器就不能创建对象了吗？
        只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作
        步骤如下：
            1) 通过Class类的getDeclaredConstructor(Class... parameterTypes)
            取得本类的指定形参类型的构造器。
            2) 向构造器的形参中传递一个对象数组进去，里面包含了构造器中需要的各个参数
            3) 通过Constructor实例化对象

    调用指定的方法
        通过反射，调用类中的方法，通过Method类完成
        1) 通过Class类的getMethod(String name, Class... parameterTypes)方法
        取得一个Method对象，并设置此方法操作时所需要的参数类型。
        2) 之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中
        传递要设置的obj对象的参数信息。

    Object invoke(Object obj, Object... args)
        Object 对应原方法的返回值，若原方法没有返回值，此时返回null
        若原方法为静态方法，此时形参Object obj可为null
        若原方法形参列表为空，则Object[] args为null
        若原方法声明为private，则需要在调用此invoke()方法前，显式调用方法对象的
            setAccessible(true)方法，用于关闭权限检查

    setAccessible
        Method、Field、Constructor对象都有setAccessible()方法
        setAccessible作用是启动和禁用访问安全检查的开关
        参数值为true则指示反射的对象在使用时应该取消java语言访问检查
            提高反射的效率：如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true
            使得原本无法访问的私有成员也可以访问

        参数值为false则指示反射的对象在使用时应该打开java语言访问检查
